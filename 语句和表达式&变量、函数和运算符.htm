<!DOCTYPE HTML><html><head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

<title>语句和表达式&变量、函数和运算符</title>
    <!--mark |wiz_custom_css| for wizeditor replace it-->


<style id="wiz_custom_css">        html, body {            font-size: 15px;        }        body {            font-family: Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;            line-height: 1.6;            margin: 0;            padding: 20px 36px;            padding: 1.33rem 2.4rem;        }        h1, h2, h3, h4, h5, h6 {            margin: 20px 0 10px;            margin: 1.33rem 0 0.667rem;            padding: 0;            font-weight: bold;        }        h1 {            font-size: 21px;            font-size: 1.4rem;        }        h2 {            font-size: 20px;            font-size: 1.33rem;        }        h3 {            font-size: 18px;            font-size: 1.2rem;        }        h4 {            font-size: 17px;            font-size: 1.13rem;        }        h5 {            font-size: 15px;            font-size: 1rem;        }        h6 {            font-size: 15px;            font-size: 1rem;            color: #777777;            margin: 1rem 0;        }        div, p, ul, ol, dl, li {            margin: 0;        }        blockquote, table, pre, code {            margin: 8px 0;        }        ul, ol {            padding-left: 32px;            padding-left: 2.13rem;        }        blockquote {            padding: 0 12px;            padding: 0 0.8rem;        }        blockquote > :first-child {            margin-top: 0;        }        blockquote > :last-child {            margin-bottom: 0;        }        img {            border: 0;            max-width: 100%;            height: auto !important;            margin: 2px 0;        }        table {            border-collapse: collapse;            border: 1px solid #bbbbbb;        }        td {            padding: 4px 8px;            border-collapse: collapse;            border: 1px solid #bbbbbb;        }        @media screen and (max-width: 660px) {            body {                padding: 20px 18px;                padding: 1.33rem 1.2rem;            }        }        @media only screen and (-webkit-max-device-width: 1024px), only screen and (-o-max-device-width: 1024px), only screen and (max-device-width: 1024px), only screen and (-webkit-min-device-pixel-ratio: 3), only screen and (-o-min-device-pixel-ratio: 3), only screen and (min-device-pixel-ratio: 3) {            html, body {                font-size: 17px;            }            body {                line-height: 1.7;                padding: 0.75rem 0.9375rem;                color: #353c47;            }            h1 {                font-size: 2.125rem;            }            h2 {                font-size: 1.875rem;            }            h3 {                font-size: 1.625rem;            }            h4 {                font-size: 1.375rem;            }            h5 {                font-size: 1.125rem;            }            h6 {                color: inherit;            }            ul, ol {                padding-left: 2.5rem;            }            blockquote {                padding: 0 0.9375rem;            }        }</style><style type="text/css" id="wiz_todo_style_id" wiz_link_version="01.00.09">.wiz-todo, .wiz-todo-img {width: 16px; height: 16px; cursor: default; padding: 0 10px 0 2px; vertical-align: -10%;-webkit-user-select: none;} .wiz-todo-label { display: inline-block; padding-top: 7px; padding-bottom: 6px; line-height: 1.5;} .wiz-todo-label-checked {  color: #666;} .wiz-todo-label-unchecked {text-decoration: initial;} .wiz-todo-completed-info {padding-left: 44px; display: inline-block; } .wiz-todo-avatar { width:20px; height: 20px; vertical-align: -20%; margin-right:10px; border-radius: 2px;} .wiz-todo-account, .wiz-todo-dt { color: #666; }</style><link type="text/css" rel="stylesheet" id="wiz_code_highlight_link" href="语句和表达式&变量、函数和运算符_files/wiz_code_highlight_20.css"></head>

<body  style="">所有的块语句都应当使用花括号，包括：<div><ul><li>if</li><li>for</li><li>while</li><li>do…while…</li><li>try…catch…finally</li></ul><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-js"><span class="com">//不好的写法</span></code></li><li class="L1"><code class="language-js"><span class="kwd">if </span><span class="pun">(</span><span class="pln">condition</span><span class="pun">)</span></code></li><li class="L2"><code class="language-js"><span class="pln">    doSomethind</span><span class="pun">();</span></code></li><li class="L3"><code class="language-js"></code></li><li class="L4"><code class="language-js"><span class="com">//不好的写法</span></code></li><li class="L5"><code class="language-js"><span class="kwd">if </span><span class="pun">(</span><span class="pln">condition</span><span class="pun">)</span><span class="pln"> doSomething</span><span class="pun">();</span></code></li><li class="L6"><code class="language-js"></code></li><li class="L7"><code class="language-js"><span class="com">//好的写法</span></code></li><li class="L8"><code class="language-js"><span class="kwd">if </span><span class="pun">(</span><span class="pln">condition</span><span class="pun">) {</span></code></li><li class="L9"><code class="language-js"><span class="pln">    doSomethind</span><span class="pun">();</span></code></li><li class="L0"><code class="language-js"><span class="pun">}</span></code></li><li class="L1"><code class="language-js"></code></li><li class="L2"><code class="language-js"><span class="com">//不好的写法</span></code></li><li class="L3"><code class="language-js"><span class="kwd">if </span><span class="pun">(</span><span class="pln">condition</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> doSomething</span><span class="pun">();</span><span class="pln"> </span><span class="pun">}</span></code></li></ol></pre></div><div>花括号的对齐方式</div></div><div>两种风格：<span style="font-size: 15px; line-height: 1.6;">第一种将花括号放置在块语句中第一行代码的末尾；第二种将左花括号放置于块语句首行的下一行。</span></div><div><span style="font-size: 15px; line-height: 1.6;">块语句间隔</span></div><div>语句名、圆括号、和左花括号之间没有空格间隔</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-js"><span class="kwd">if</span><span class="pun">(</span><span class="pln">condition</span><span class="pun">){</span></code></li><li class="L1"><code class="language-js"><span class="pln">    doSomething</span><span class="pun">();</span></code></li><li class="L2"><code class="language-js"><span class="pun">}</span></code></li></ol></pre></div><div>在左圆括号之前和右圆括号之后各添加一个空格</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-js"><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">codition</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-js"><span class="pln">    doSomething</span><span class="pun">:</span></code></li><li class="L2"><code class="language-js"><span class="pun">}</span><span class="pln"> </span></code></li></ol></pre></div><div>在左圆括号后和右圆括号前各添加一个空格</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-js"><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> condition </span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-js"><span class="pln">    doSomething</span><span class="pun">();</span></code></li><li class="L2"><code class="language-js"><span class="pun">}</span></code></li></ol></pre></div><div>个人比较喜欢第二种，易读但不是太麻烦。</div></div><div><br></div><div>switch语句</div><div>缩进</div><div>Java风格：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-js"><span class="kwd">switch</span><span class="pln"> </span><span class="pun">(</span><span class="pln">condition</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-js"><span class="pln">    </span><span class="kwd">case</span><span class="pln"> </span><span class="str">"first"</span><span class="pun">:</span></code></li><li class="L2"><code class="language-js"><span class="pln">        </span><span class="com">//code</span></code></li><li class="L3"><code class="language-js"><span class="pln">        </span><span class="kwd">break</span><span class="pun">;</span></code></li><li class="L4"><code class="language-js"></code></li><li class="L5"><code class="language-js"><span class="pln">    </span><span class="kwd">case</span><span class="pln"> </span><span class="str">"second"</span><span class="pun">:</span></code></li><li class="L6"><code class="language-js"><span class="pln">        </span><span class="com">//code</span></code></li><li class="L7"><code class="language-js"><span class="pln">        </span><span class="kwd">break</span><span class="pun">;</span></code></li><li class="L8"><code class="language-js"></code></li><li class="L9"><code class="language-js"><span class="pln">    </span><span class="kwd">default</span><span class="pun">:</span></code></li><li class="L0"><code class="language-js"><span class="pln">        </span><span class="com">//code</span></code></li><li class="L1"><code class="language-js"><span class="pun">}</span></code></li></ol></pre></div><div>每条case语句相对于switch关键字都缩进一个层级</div></div><div>从第二条case语句开始，每条case语句前后都各有一个空行。</div><div>Dojo风格：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-js"><span class="kwd">switch</span><span class="pln"> </span><span class="pun">(</span><span class="pln">condition</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-js"><span class="kwd">case</span><span class="pln"> </span><span class="str">"first"</span><span class="pun">:</span></code></li><li class="L2"><code class="language-js"><span class="pln">    </span><span class="com">//code</span></code></li><li class="L3"><code class="language-js"><span class="pln">    </span><span class="kwd">break</span><span class="pun">;</span></code></li><li class="L4"><code class="language-js"><span class="kwd">case</span><span class="pln"> </span><span class="str">"second"</span><span class="pun">:</span></code></li><li class="L5"><code class="language-js"><span class="pln">    </span><span class="com">//code</span></code></li><li class="L6"><code class="language-js"><span class="pln">    </span><span class="kwd">break</span><span class="pun">;</span></code></li><li class="L7"><code class="language-js"><span class="kwd">default</span><span class="pun">:</span></code></li><li class="L8"><code class="language-js"><span class="pln">    </span><span class="com">//code</span></code></li><li class="L9"><code class="language-js"><span class="pun">}</span></code></li></ol></pre></div><div>default</div></div><div>很多人认为不论何时都不应当省略default，哪怕default什么都不做。</div><div>个人不太喜欢写。</div><div><br></div><div>with语句</div><div>咱们就尽量不要写with语句了。</div><div><br></div><div>for-in循环</div><div>最好使用hasOwnProperty()方法来为for-in循环过滤出实例属性。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-js"><span class="kwd">var</span><span class="pln"> prop</span><span class="pun">;</span></code></li><li class="L1"><code class="language-js"></code></li><li class="L2"><code class="language-js"><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">prop in object</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-js"><span class="pln">    </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">object</span><span class="pun">.</span><span class="pln">hasOwnProperty</span><span class="pun">(</span><span class="pln">prop</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-js"><span class="pln">        console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">"..."</span><span class="pun">);</span></code></li><li class="L5"><code class="language-js"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-js"><span class="pun">}</span></code></li></ol></pre></div><div>不要把for-in用在数组的遍历上</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-js"><span class="com">//不好的写法</span></code></li><li class="L1"><code class="language-js"><span class="kwd">var</span><span class="pln"> vaules </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3</span><span class="pun">],</span></code></li><li class="L2"><code class="language-js"><span class="pln">    i</span><span class="pun">;</span></code></li><li class="L3"><code class="language-js"></code></li><li class="L4"><code class="language-js"><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">i in vaules</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-js"><span class="pln">    process</span><span class="pun">(</span><span class="pln">item</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]);</span></code></li><li class="L6"><code class="language-js"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div><div>变量声明</div><div>建议将局部变量的定义作为函数内第一条语句。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-js"><span class="kwd">function</span><span class="pln"> doSomethingWithItems</span><span class="pun">(</span><span class="pln">items</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-js"><span class="pln">    </span></code></li><li class="L2"><code class="language-js"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> i</span><span class="pun">,</span><span class="pln"> len</span><span class="pun">;</span></code></li><li class="L3"><code class="language-js"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> value </span><span class="pun">=</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span></code></li><li class="L4"><code class="language-js"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> value </span><span class="pun">+</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span></code></li><li class="L5"><code class="language-js"></code></li><li class="L6"><code class="language-js"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> len</span><span class="pun">=</span><span class="pln">items</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> len</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-js"><span class="pln">        doSomething</span><span class="pun">(</span><span class="pln">items</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]);</span></code></li><li class="L8"><code class="language-js"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L9"><code class="language-js"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div><div>函数声明</div><div>推荐先声明JavaScript函数然后使用函数。</div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-js"><span class="kwd">function</span><span class="pln"> doSomething</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-js"><span class="pln">    </span><span class="com">//code</span></code></li><li class="L2"><code class="language-js"><span class="pun">}</span></code></li><li class="L3"><code class="language-js"></code></li><li class="L4"><code class="language-js"></code></li><li class="L5"><code class="language-js"><span class="pln">doSomething</span><span class="pun">();</span></code></li></ol></pre></div><div>此外，函数声明不应出现在语句块之内。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-js"><span class="com">//不好的写法</span></code></li><li class="L1"><code class="language-js"><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">condition</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-js"><span class="pln">    </span><span class="kwd">function</span><span class="pln"> doSomething</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-js"><span class="pln">        </span><span class="com">//code</span></code></li><li class="L4"><code class="language-js"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L5"><code class="language-js"><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-js"><span class="pln">    </span><span class="kwd">function</span><span class="pln"> doSomething</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-js"><span class="pln">        </span><span class="com">//code</span></code></li><li class="L8"><code class="language-js"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L9"><code class="language-js"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div><div>函数调用间隔</div><div>推荐风格：在函数名和左花括号之间没有空格。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-js"><span class="com">//好的写法</span></code></li><li class="L1"><code class="language-js"><span class="pln">doSomething</span><span class="pun">(</span><span class="pln">item</span><span class="pun">);</span></code></li><li class="L2"><code class="language-js"></code></li><li class="L3"><code class="language-js"><span class="com">//不好的写法:看起来想一个块语句</span></code></li><li class="L4"><code class="language-js"><span class="pln">doSomething </span><span class="pun">(</span><span class="pln">item</span><span class="pun">);</span></code></li></ol></pre></div><div><br></div></div><div>立即调用的函数</div><div>匿名函数可以通过在最后加上一对圆括号来立即执行并返回一个值，然后将这个值赋值给变量。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-js"><span class="com">// 不好的写法</span></code></li><li class="L1"><code class="language-js"><span class="kwd">var</span><span class="pln"> value </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-js"><span class="pln">    </span><span class="com">// 函数体</span></code></li><li class="L3"><code class="language-js"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-js"><span class="pln">        message</span><span class="pun">:</span><span class="pln"> </span><span class="str">"Hi"</span></code></li><li class="L5"><code class="language-js"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-js"><span class="pun">}();</span></code></li></ol></pre></div><div>为了让立即执行的函数能够被一眼看出来，可以将函数用一对圆括号包裹起来。</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-js"><span class="com">// 好的写法</span></code></li><li class="L1"><code class="language-js"><span class="kwd">var</span><span class="pln"> value </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">function</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-js"><span class="pln">    </span><span class="com">// 函数体</span></code></li><li class="L3"><code class="language-js"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-js"><span class="pln">        message</span><span class="pun">:</span><span class="pln"> </span><span class="str">"Hi"</span></code></li><li class="L5"><code class="language-js"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-js"><span class="pun">}());</span></code></li></ol></pre></div><div><br></div></div><div>严格模式</div><div>最好不要再全局作用域中使用"use strict"。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-js"><span class="com">// 不好的写法 - 全局的严格模式</span></code></li><li class="L1"><code class="language-js"><span class="str">"use strict"</span><span class="pun">;</span></code></li><li class="L2"><code class="language-js"><span class="kwd">function</span><span class="pln"> doSomething</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-js"><span class="pln">    </span><span class="com">// code</span></code></li><li class="L4"><code class="language-js"><span class="pun">}</span></code></li><li class="L5"><code class="language-js"></code></li><li class="L6"><code class="language-js"><span class="com">// 好的写法</span></code></li><li class="L7"><code class="language-js"><span class="kwd">function</span><span class="pln"> doSomething</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-js"><span class="pln">    </span><span class="str">"use strict"</span><span class="pun">;</span></code></li><li class="L9"><code class="language-js"><span class="pln">    </span><span class="com">// code</span></code></li><li class="L0"><code class="language-js"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div><div>相等</div><div>推荐不要使用 == 和 !=，而应当使用 === 和 !==。</div><div><br></div><div>eval()</div><div>通用原则：严禁使用Function，只在别无他法时使用eval()。setTimeout()和setInterval()也是可以使用的，但不用字符串形式而要用函数。</div><div>ECMAScript 5 严格模式对于eval()有着严格的限制，禁止在一个封闭的作用域中使用它创建变量或者函数。</div><div><br></div><div>原始包装类型</div><div>JavaScript里有三种原始包装类型：String、Boolean和Number。每种类型都代表全局作用域中的一个构造函数，并分别表示各自对用的原始值的对象。</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-js"><span class="com">// 不好的做法</span></code></li><li class="L1"><code class="language-js"><span class="kwd">var</span><span class="pln"> name </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">String</span><span class="pun">(</span><span class="str">"Nicholas"</span><span class="pun">);</span></code></li></ol></pre></div><div><br></div></div></body></html>